// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/maisiq/go-ugc-service/internal/repository.UOW -o uow_mock.go -n UOWMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UOWMock implements mm_repository.UOW
type UOWMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcRunWithinTx          func(ctx context.Context, fn func(ctx context.Context) error) (err error)
	funcRunWithinTxOrigin    string
	inspectFuncRunWithinTx   func(ctx context.Context, fn func(ctx context.Context) error)
	afterRunWithinTxCounter  uint64
	beforeRunWithinTxCounter uint64
	RunWithinTxMock          mUOWMockRunWithinTx
}

// NewUOWMock returns a mock for mm_repository.UOW
func NewUOWMock(t minimock.Tester) *UOWMock {
	m := &UOWMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RunWithinTxMock = mUOWMockRunWithinTx{mock: m}
	m.RunWithinTxMock.callArgs = []*UOWMockRunWithinTxParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUOWMockRunWithinTx struct {
	optional           bool
	mock               *UOWMock
	defaultExpectation *UOWMockRunWithinTxExpectation
	expectations       []*UOWMockRunWithinTxExpectation

	callArgs []*UOWMockRunWithinTxParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UOWMockRunWithinTxExpectation specifies expectation struct of the UOW.RunWithinTx
type UOWMockRunWithinTxExpectation struct {
	mock               *UOWMock
	params             *UOWMockRunWithinTxParams
	paramPtrs          *UOWMockRunWithinTxParamPtrs
	expectationOrigins UOWMockRunWithinTxExpectationOrigins
	results            *UOWMockRunWithinTxResults
	returnOrigin       string
	Counter            uint64
}

// UOWMockRunWithinTxParams contains parameters of the UOW.RunWithinTx
type UOWMockRunWithinTxParams struct {
	ctx context.Context
	fn  func(ctx context.Context) error
}

// UOWMockRunWithinTxParamPtrs contains pointers to parameters of the UOW.RunWithinTx
type UOWMockRunWithinTxParamPtrs struct {
	ctx *context.Context
	fn  *func(ctx context.Context) error
}

// UOWMockRunWithinTxResults contains results of the UOW.RunWithinTx
type UOWMockRunWithinTxResults struct {
	err error
}

// UOWMockRunWithinTxOrigins contains origins of expectations of the UOW.RunWithinTx
type UOWMockRunWithinTxExpectationOrigins struct {
	origin    string
	originCtx string
	originFn  string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRunWithinTx *mUOWMockRunWithinTx) Optional() *mUOWMockRunWithinTx {
	mmRunWithinTx.optional = true
	return mmRunWithinTx
}

// Expect sets up expected params for UOW.RunWithinTx
func (mmRunWithinTx *mUOWMockRunWithinTx) Expect(ctx context.Context, fn func(ctx context.Context) error) *mUOWMockRunWithinTx {
	if mmRunWithinTx.mock.funcRunWithinTx != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by Set")
	}

	if mmRunWithinTx.defaultExpectation == nil {
		mmRunWithinTx.defaultExpectation = &UOWMockRunWithinTxExpectation{}
	}

	if mmRunWithinTx.defaultExpectation.paramPtrs != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by ExpectParams functions")
	}

	mmRunWithinTx.defaultExpectation.params = &UOWMockRunWithinTxParams{ctx, fn}
	mmRunWithinTx.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRunWithinTx.expectations {
		if minimock.Equal(e.params, mmRunWithinTx.defaultExpectation.params) {
			mmRunWithinTx.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRunWithinTx.defaultExpectation.params)
		}
	}

	return mmRunWithinTx
}

// ExpectCtxParam1 sets up expected param ctx for UOW.RunWithinTx
func (mmRunWithinTx *mUOWMockRunWithinTx) ExpectCtxParam1(ctx context.Context) *mUOWMockRunWithinTx {
	if mmRunWithinTx.mock.funcRunWithinTx != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by Set")
	}

	if mmRunWithinTx.defaultExpectation == nil {
		mmRunWithinTx.defaultExpectation = &UOWMockRunWithinTxExpectation{}
	}

	if mmRunWithinTx.defaultExpectation.params != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by Expect")
	}

	if mmRunWithinTx.defaultExpectation.paramPtrs == nil {
		mmRunWithinTx.defaultExpectation.paramPtrs = &UOWMockRunWithinTxParamPtrs{}
	}
	mmRunWithinTx.defaultExpectation.paramPtrs.ctx = &ctx
	mmRunWithinTx.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRunWithinTx
}

// ExpectFnParam2 sets up expected param fn for UOW.RunWithinTx
func (mmRunWithinTx *mUOWMockRunWithinTx) ExpectFnParam2(fn func(ctx context.Context) error) *mUOWMockRunWithinTx {
	if mmRunWithinTx.mock.funcRunWithinTx != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by Set")
	}

	if mmRunWithinTx.defaultExpectation == nil {
		mmRunWithinTx.defaultExpectation = &UOWMockRunWithinTxExpectation{}
	}

	if mmRunWithinTx.defaultExpectation.params != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by Expect")
	}

	if mmRunWithinTx.defaultExpectation.paramPtrs == nil {
		mmRunWithinTx.defaultExpectation.paramPtrs = &UOWMockRunWithinTxParamPtrs{}
	}
	mmRunWithinTx.defaultExpectation.paramPtrs.fn = &fn
	mmRunWithinTx.defaultExpectation.expectationOrigins.originFn = minimock.CallerInfo(1)

	return mmRunWithinTx
}

// Inspect accepts an inspector function that has same arguments as the UOW.RunWithinTx
func (mmRunWithinTx *mUOWMockRunWithinTx) Inspect(f func(ctx context.Context, fn func(ctx context.Context) error)) *mUOWMockRunWithinTx {
	if mmRunWithinTx.mock.inspectFuncRunWithinTx != nil {
		mmRunWithinTx.mock.t.Fatalf("Inspect function is already set for UOWMock.RunWithinTx")
	}

	mmRunWithinTx.mock.inspectFuncRunWithinTx = f

	return mmRunWithinTx
}

// Return sets up results that will be returned by UOW.RunWithinTx
func (mmRunWithinTx *mUOWMockRunWithinTx) Return(err error) *UOWMock {
	if mmRunWithinTx.mock.funcRunWithinTx != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by Set")
	}

	if mmRunWithinTx.defaultExpectation == nil {
		mmRunWithinTx.defaultExpectation = &UOWMockRunWithinTxExpectation{mock: mmRunWithinTx.mock}
	}
	mmRunWithinTx.defaultExpectation.results = &UOWMockRunWithinTxResults{err}
	mmRunWithinTx.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRunWithinTx.mock
}

// Set uses given function f to mock the UOW.RunWithinTx method
func (mmRunWithinTx *mUOWMockRunWithinTx) Set(f func(ctx context.Context, fn func(ctx context.Context) error) (err error)) *UOWMock {
	if mmRunWithinTx.defaultExpectation != nil {
		mmRunWithinTx.mock.t.Fatalf("Default expectation is already set for the UOW.RunWithinTx method")
	}

	if len(mmRunWithinTx.expectations) > 0 {
		mmRunWithinTx.mock.t.Fatalf("Some expectations are already set for the UOW.RunWithinTx method")
	}

	mmRunWithinTx.mock.funcRunWithinTx = f
	mmRunWithinTx.mock.funcRunWithinTxOrigin = minimock.CallerInfo(1)
	return mmRunWithinTx.mock
}

// When sets expectation for the UOW.RunWithinTx which will trigger the result defined by the following
// Then helper
func (mmRunWithinTx *mUOWMockRunWithinTx) When(ctx context.Context, fn func(ctx context.Context) error) *UOWMockRunWithinTxExpectation {
	if mmRunWithinTx.mock.funcRunWithinTx != nil {
		mmRunWithinTx.mock.t.Fatalf("UOWMock.RunWithinTx mock is already set by Set")
	}

	expectation := &UOWMockRunWithinTxExpectation{
		mock:               mmRunWithinTx.mock,
		params:             &UOWMockRunWithinTxParams{ctx, fn},
		expectationOrigins: UOWMockRunWithinTxExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRunWithinTx.expectations = append(mmRunWithinTx.expectations, expectation)
	return expectation
}

// Then sets up UOW.RunWithinTx return parameters for the expectation previously defined by the When method
func (e *UOWMockRunWithinTxExpectation) Then(err error) *UOWMock {
	e.results = &UOWMockRunWithinTxResults{err}
	return e.mock
}

// Times sets number of times UOW.RunWithinTx should be invoked
func (mmRunWithinTx *mUOWMockRunWithinTx) Times(n uint64) *mUOWMockRunWithinTx {
	if n == 0 {
		mmRunWithinTx.mock.t.Fatalf("Times of UOWMock.RunWithinTx mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRunWithinTx.expectedInvocations, n)
	mmRunWithinTx.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRunWithinTx
}

func (mmRunWithinTx *mUOWMockRunWithinTx) invocationsDone() bool {
	if len(mmRunWithinTx.expectations) == 0 && mmRunWithinTx.defaultExpectation == nil && mmRunWithinTx.mock.funcRunWithinTx == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRunWithinTx.mock.afterRunWithinTxCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRunWithinTx.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// RunWithinTx implements mm_repository.UOW
func (mmRunWithinTx *UOWMock) RunWithinTx(ctx context.Context, fn func(ctx context.Context) error) (err error) {
	mm_atomic.AddUint64(&mmRunWithinTx.beforeRunWithinTxCounter, 1)
	defer mm_atomic.AddUint64(&mmRunWithinTx.afterRunWithinTxCounter, 1)

	mmRunWithinTx.t.Helper()

	if mmRunWithinTx.inspectFuncRunWithinTx != nil {
		mmRunWithinTx.inspectFuncRunWithinTx(ctx, fn)
	}

	mm_params := UOWMockRunWithinTxParams{ctx, fn}

	// Record call args
	mmRunWithinTx.RunWithinTxMock.mutex.Lock()
	mmRunWithinTx.RunWithinTxMock.callArgs = append(mmRunWithinTx.RunWithinTxMock.callArgs, &mm_params)
	mmRunWithinTx.RunWithinTxMock.mutex.Unlock()

	for _, e := range mmRunWithinTx.RunWithinTxMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRunWithinTx.RunWithinTxMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRunWithinTx.RunWithinTxMock.defaultExpectation.Counter, 1)
		mm_want := mmRunWithinTx.RunWithinTxMock.defaultExpectation.params
		mm_want_ptrs := mmRunWithinTx.RunWithinTxMock.defaultExpectation.paramPtrs

		mm_got := UOWMockRunWithinTxParams{ctx, fn}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRunWithinTx.t.Errorf("UOWMock.RunWithinTx got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRunWithinTx.RunWithinTxMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.fn != nil && !minimock.Equal(*mm_want_ptrs.fn, mm_got.fn) {
				mmRunWithinTx.t.Errorf("UOWMock.RunWithinTx got unexpected parameter fn, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRunWithinTx.RunWithinTxMock.defaultExpectation.expectationOrigins.originFn, *mm_want_ptrs.fn, mm_got.fn, minimock.Diff(*mm_want_ptrs.fn, mm_got.fn))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRunWithinTx.t.Errorf("UOWMock.RunWithinTx got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRunWithinTx.RunWithinTxMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRunWithinTx.RunWithinTxMock.defaultExpectation.results
		if mm_results == nil {
			mmRunWithinTx.t.Fatal("No results are set for the UOWMock.RunWithinTx")
		}
		return (*mm_results).err
	}
	if mmRunWithinTx.funcRunWithinTx != nil {
		return mmRunWithinTx.funcRunWithinTx(ctx, fn)
	}
	mmRunWithinTx.t.Fatalf("Unexpected call to UOWMock.RunWithinTx. %v %v", ctx, fn)
	return
}

// RunWithinTxAfterCounter returns a count of finished UOWMock.RunWithinTx invocations
func (mmRunWithinTx *UOWMock) RunWithinTxAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunWithinTx.afterRunWithinTxCounter)
}

// RunWithinTxBeforeCounter returns a count of UOWMock.RunWithinTx invocations
func (mmRunWithinTx *UOWMock) RunWithinTxBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunWithinTx.beforeRunWithinTxCounter)
}

// Calls returns a list of arguments used in each call to UOWMock.RunWithinTx.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRunWithinTx *mUOWMockRunWithinTx) Calls() []*UOWMockRunWithinTxParams {
	mmRunWithinTx.mutex.RLock()

	argCopy := make([]*UOWMockRunWithinTxParams, len(mmRunWithinTx.callArgs))
	copy(argCopy, mmRunWithinTx.callArgs)

	mmRunWithinTx.mutex.RUnlock()

	return argCopy
}

// MinimockRunWithinTxDone returns true if the count of the RunWithinTx invocations corresponds
// the number of defined expectations
func (m *UOWMock) MinimockRunWithinTxDone() bool {
	if m.RunWithinTxMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RunWithinTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RunWithinTxMock.invocationsDone()
}

// MinimockRunWithinTxInspect logs each unmet expectation
func (m *UOWMock) MinimockRunWithinTxInspect() {
	for _, e := range m.RunWithinTxMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UOWMock.RunWithinTx at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRunWithinTxCounter := mm_atomic.LoadUint64(&m.afterRunWithinTxCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RunWithinTxMock.defaultExpectation != nil && afterRunWithinTxCounter < 1 {
		if m.RunWithinTxMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UOWMock.RunWithinTx at\n%s", m.RunWithinTxMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UOWMock.RunWithinTx at\n%s with params: %#v", m.RunWithinTxMock.defaultExpectation.expectationOrigins.origin, *m.RunWithinTxMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRunWithinTx != nil && afterRunWithinTxCounter < 1 {
		m.t.Errorf("Expected call to UOWMock.RunWithinTx at\n%s", m.funcRunWithinTxOrigin)
	}

	if !m.RunWithinTxMock.invocationsDone() && afterRunWithinTxCounter > 0 {
		m.t.Errorf("Expected %d calls to UOWMock.RunWithinTx at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RunWithinTxMock.expectedInvocations), m.RunWithinTxMock.expectedInvocationsOrigin, afterRunWithinTxCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UOWMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockRunWithinTxInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UOWMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UOWMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRunWithinTxDone()
}
