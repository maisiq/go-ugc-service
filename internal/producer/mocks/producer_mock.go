// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/maisiq/go-ugc-service/internal/producer.Producer -o producer_mock.go -n ProducerMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	mm_producer "github.com/maisiq/go-ugc-service/internal/producer"
)

// ProducerMock implements mm_producer.Producer
type ProducerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcWriteMessages          func(ctx context.Context, cancel context.CancelFunc, messages []mm_producer.AnalyticsMessage)
	funcWriteMessagesOrigin    string
	inspectFuncWriteMessages   func(ctx context.Context, cancel context.CancelFunc, messages []mm_producer.AnalyticsMessage)
	afterWriteMessagesCounter  uint64
	beforeWriteMessagesCounter uint64
	WriteMessagesMock          mProducerMockWriteMessages
}

// NewProducerMock returns a mock for mm_producer.Producer
func NewProducerMock(t minimock.Tester) *ProducerMock {
	m := &ProducerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.WriteMessagesMock = mProducerMockWriteMessages{mock: m}
	m.WriteMessagesMock.callArgs = []*ProducerMockWriteMessagesParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProducerMockWriteMessages struct {
	optional           bool
	mock               *ProducerMock
	defaultExpectation *ProducerMockWriteMessagesExpectation
	expectations       []*ProducerMockWriteMessagesExpectation

	callArgs []*ProducerMockWriteMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProducerMockWriteMessagesExpectation specifies expectation struct of the Producer.WriteMessages
type ProducerMockWriteMessagesExpectation struct {
	mock               *ProducerMock
	params             *ProducerMockWriteMessagesParams
	paramPtrs          *ProducerMockWriteMessagesParamPtrs
	expectationOrigins ProducerMockWriteMessagesExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// ProducerMockWriteMessagesParams contains parameters of the Producer.WriteMessages
type ProducerMockWriteMessagesParams struct {
	ctx      context.Context
	cancel   context.CancelFunc
	messages []mm_producer.AnalyticsMessage
}

// ProducerMockWriteMessagesParamPtrs contains pointers to parameters of the Producer.WriteMessages
type ProducerMockWriteMessagesParamPtrs struct {
	ctx      *context.Context
	cancel   *context.CancelFunc
	messages *[]mm_producer.AnalyticsMessage
}

// ProducerMockWriteMessagesOrigins contains origins of expectations of the Producer.WriteMessages
type ProducerMockWriteMessagesExpectationOrigins struct {
	origin         string
	originCtx      string
	originCancel   string
	originMessages string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmWriteMessages *mProducerMockWriteMessages) Optional() *mProducerMockWriteMessages {
	mmWriteMessages.optional = true
	return mmWriteMessages
}

// Expect sets up expected params for Producer.WriteMessages
func (mmWriteMessages *mProducerMockWriteMessages) Expect(ctx context.Context, cancel context.CancelFunc, messages []mm_producer.AnalyticsMessage) *mProducerMockWriteMessages {
	if mmWriteMessages.mock.funcWriteMessages != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Set")
	}

	if mmWriteMessages.defaultExpectation == nil {
		mmWriteMessages.defaultExpectation = &ProducerMockWriteMessagesExpectation{}
	}

	if mmWriteMessages.defaultExpectation.paramPtrs != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by ExpectParams functions")
	}

	mmWriteMessages.defaultExpectation.params = &ProducerMockWriteMessagesParams{ctx, cancel, messages}
	mmWriteMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmWriteMessages.expectations {
		if minimock.Equal(e.params, mmWriteMessages.defaultExpectation.params) {
			mmWriteMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmWriteMessages.defaultExpectation.params)
		}
	}

	return mmWriteMessages
}

// ExpectCtxParam1 sets up expected param ctx for Producer.WriteMessages
func (mmWriteMessages *mProducerMockWriteMessages) ExpectCtxParam1(ctx context.Context) *mProducerMockWriteMessages {
	if mmWriteMessages.mock.funcWriteMessages != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Set")
	}

	if mmWriteMessages.defaultExpectation == nil {
		mmWriteMessages.defaultExpectation = &ProducerMockWriteMessagesExpectation{}
	}

	if mmWriteMessages.defaultExpectation.params != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Expect")
	}

	if mmWriteMessages.defaultExpectation.paramPtrs == nil {
		mmWriteMessages.defaultExpectation.paramPtrs = &ProducerMockWriteMessagesParamPtrs{}
	}
	mmWriteMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmWriteMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmWriteMessages
}

// ExpectCancelParam2 sets up expected param cancel for Producer.WriteMessages
func (mmWriteMessages *mProducerMockWriteMessages) ExpectCancelParam2(cancel context.CancelFunc) *mProducerMockWriteMessages {
	if mmWriteMessages.mock.funcWriteMessages != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Set")
	}

	if mmWriteMessages.defaultExpectation == nil {
		mmWriteMessages.defaultExpectation = &ProducerMockWriteMessagesExpectation{}
	}

	if mmWriteMessages.defaultExpectation.params != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Expect")
	}

	if mmWriteMessages.defaultExpectation.paramPtrs == nil {
		mmWriteMessages.defaultExpectation.paramPtrs = &ProducerMockWriteMessagesParamPtrs{}
	}
	mmWriteMessages.defaultExpectation.paramPtrs.cancel = &cancel
	mmWriteMessages.defaultExpectation.expectationOrigins.originCancel = minimock.CallerInfo(1)

	return mmWriteMessages
}

// ExpectMessagesParam3 sets up expected param messages for Producer.WriteMessages
func (mmWriteMessages *mProducerMockWriteMessages) ExpectMessagesParam3(messages []mm_producer.AnalyticsMessage) *mProducerMockWriteMessages {
	if mmWriteMessages.mock.funcWriteMessages != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Set")
	}

	if mmWriteMessages.defaultExpectation == nil {
		mmWriteMessages.defaultExpectation = &ProducerMockWriteMessagesExpectation{}
	}

	if mmWriteMessages.defaultExpectation.params != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Expect")
	}

	if mmWriteMessages.defaultExpectation.paramPtrs == nil {
		mmWriteMessages.defaultExpectation.paramPtrs = &ProducerMockWriteMessagesParamPtrs{}
	}
	mmWriteMessages.defaultExpectation.paramPtrs.messages = &messages
	mmWriteMessages.defaultExpectation.expectationOrigins.originMessages = minimock.CallerInfo(1)

	return mmWriteMessages
}

// Inspect accepts an inspector function that has same arguments as the Producer.WriteMessages
func (mmWriteMessages *mProducerMockWriteMessages) Inspect(f func(ctx context.Context, cancel context.CancelFunc, messages []mm_producer.AnalyticsMessage)) *mProducerMockWriteMessages {
	if mmWriteMessages.mock.inspectFuncWriteMessages != nil {
		mmWriteMessages.mock.t.Fatalf("Inspect function is already set for ProducerMock.WriteMessages")
	}

	mmWriteMessages.mock.inspectFuncWriteMessages = f

	return mmWriteMessages
}

// Return sets up results that will be returned by Producer.WriteMessages
func (mmWriteMessages *mProducerMockWriteMessages) Return() *ProducerMock {
	if mmWriteMessages.mock.funcWriteMessages != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Set")
	}

	if mmWriteMessages.defaultExpectation == nil {
		mmWriteMessages.defaultExpectation = &ProducerMockWriteMessagesExpectation{mock: mmWriteMessages.mock}
	}

	mmWriteMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmWriteMessages.mock
}

// Set uses given function f to mock the Producer.WriteMessages method
func (mmWriteMessages *mProducerMockWriteMessages) Set(f func(ctx context.Context, cancel context.CancelFunc, messages []mm_producer.AnalyticsMessage)) *ProducerMock {
	if mmWriteMessages.defaultExpectation != nil {
		mmWriteMessages.mock.t.Fatalf("Default expectation is already set for the Producer.WriteMessages method")
	}

	if len(mmWriteMessages.expectations) > 0 {
		mmWriteMessages.mock.t.Fatalf("Some expectations are already set for the Producer.WriteMessages method")
	}

	mmWriteMessages.mock.funcWriteMessages = f
	mmWriteMessages.mock.funcWriteMessagesOrigin = minimock.CallerInfo(1)
	return mmWriteMessages.mock
}

// When sets expectation for the Producer.WriteMessages which will trigger the result defined by the following
// Then helper
func (mmWriteMessages *mProducerMockWriteMessages) When(ctx context.Context, cancel context.CancelFunc, messages []mm_producer.AnalyticsMessage) *ProducerMockWriteMessagesExpectation {
	if mmWriteMessages.mock.funcWriteMessages != nil {
		mmWriteMessages.mock.t.Fatalf("ProducerMock.WriteMessages mock is already set by Set")
	}

	expectation := &ProducerMockWriteMessagesExpectation{
		mock:               mmWriteMessages.mock,
		params:             &ProducerMockWriteMessagesParams{ctx, cancel, messages},
		expectationOrigins: ProducerMockWriteMessagesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmWriteMessages.expectations = append(mmWriteMessages.expectations, expectation)
	return expectation
}

// Then sets up Producer.WriteMessages return parameters for the expectation previously defined by the When method

func (e *ProducerMockWriteMessagesExpectation) Then() *ProducerMock {
	return e.mock
}

// Times sets number of times Producer.WriteMessages should be invoked
func (mmWriteMessages *mProducerMockWriteMessages) Times(n uint64) *mProducerMockWriteMessages {
	if n == 0 {
		mmWriteMessages.mock.t.Fatalf("Times of ProducerMock.WriteMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmWriteMessages.expectedInvocations, n)
	mmWriteMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmWriteMessages
}

func (mmWriteMessages *mProducerMockWriteMessages) invocationsDone() bool {
	if len(mmWriteMessages.expectations) == 0 && mmWriteMessages.defaultExpectation == nil && mmWriteMessages.mock.funcWriteMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmWriteMessages.mock.afterWriteMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmWriteMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// WriteMessages implements mm_producer.Producer
func (mmWriteMessages *ProducerMock) WriteMessages(ctx context.Context, cancel context.CancelFunc, messages []mm_producer.AnalyticsMessage) {
	mm_atomic.AddUint64(&mmWriteMessages.beforeWriteMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmWriteMessages.afterWriteMessagesCounter, 1)

	mmWriteMessages.t.Helper()

	if mmWriteMessages.inspectFuncWriteMessages != nil {
		mmWriteMessages.inspectFuncWriteMessages(ctx, cancel, messages)
	}

	mm_params := ProducerMockWriteMessagesParams{ctx, cancel, messages}

	// Record call args
	mmWriteMessages.WriteMessagesMock.mutex.Lock()
	mmWriteMessages.WriteMessagesMock.callArgs = append(mmWriteMessages.WriteMessagesMock.callArgs, &mm_params)
	mmWriteMessages.WriteMessagesMock.mutex.Unlock()

	for _, e := range mmWriteMessages.WriteMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmWriteMessages.WriteMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmWriteMessages.WriteMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmWriteMessages.WriteMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmWriteMessages.WriteMessagesMock.defaultExpectation.paramPtrs

		mm_got := ProducerMockWriteMessagesParams{ctx, cancel, messages}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmWriteMessages.t.Errorf("ProducerMock.WriteMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWriteMessages.WriteMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.cancel != nil && !minimock.Equal(*mm_want_ptrs.cancel, mm_got.cancel) {
				mmWriteMessages.t.Errorf("ProducerMock.WriteMessages got unexpected parameter cancel, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWriteMessages.WriteMessagesMock.defaultExpectation.expectationOrigins.originCancel, *mm_want_ptrs.cancel, mm_got.cancel, minimock.Diff(*mm_want_ptrs.cancel, mm_got.cancel))
			}

			if mm_want_ptrs.messages != nil && !minimock.Equal(*mm_want_ptrs.messages, mm_got.messages) {
				mmWriteMessages.t.Errorf("ProducerMock.WriteMessages got unexpected parameter messages, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmWriteMessages.WriteMessagesMock.defaultExpectation.expectationOrigins.originMessages, *mm_want_ptrs.messages, mm_got.messages, minimock.Diff(*mm_want_ptrs.messages, mm_got.messages))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmWriteMessages.t.Errorf("ProducerMock.WriteMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmWriteMessages.WriteMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmWriteMessages.funcWriteMessages != nil {
		mmWriteMessages.funcWriteMessages(ctx, cancel, messages)
		return
	}
	mmWriteMessages.t.Fatalf("Unexpected call to ProducerMock.WriteMessages. %v %v %v", ctx, cancel, messages)

}

// WriteMessagesAfterCounter returns a count of finished ProducerMock.WriteMessages invocations
func (mmWriteMessages *ProducerMock) WriteMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWriteMessages.afterWriteMessagesCounter)
}

// WriteMessagesBeforeCounter returns a count of ProducerMock.WriteMessages invocations
func (mmWriteMessages *ProducerMock) WriteMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmWriteMessages.beforeWriteMessagesCounter)
}

// Calls returns a list of arguments used in each call to ProducerMock.WriteMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmWriteMessages *mProducerMockWriteMessages) Calls() []*ProducerMockWriteMessagesParams {
	mmWriteMessages.mutex.RLock()

	argCopy := make([]*ProducerMockWriteMessagesParams, len(mmWriteMessages.callArgs))
	copy(argCopy, mmWriteMessages.callArgs)

	mmWriteMessages.mutex.RUnlock()

	return argCopy
}

// MinimockWriteMessagesDone returns true if the count of the WriteMessages invocations corresponds
// the number of defined expectations
func (m *ProducerMock) MinimockWriteMessagesDone() bool {
	if m.WriteMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.WriteMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.WriteMessagesMock.invocationsDone()
}

// MinimockWriteMessagesInspect logs each unmet expectation
func (m *ProducerMock) MinimockWriteMessagesInspect() {
	for _, e := range m.WriteMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProducerMock.WriteMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterWriteMessagesCounter := mm_atomic.LoadUint64(&m.afterWriteMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.WriteMessagesMock.defaultExpectation != nil && afterWriteMessagesCounter < 1 {
		if m.WriteMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProducerMock.WriteMessages at\n%s", m.WriteMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProducerMock.WriteMessages at\n%s with params: %#v", m.WriteMessagesMock.defaultExpectation.expectationOrigins.origin, *m.WriteMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcWriteMessages != nil && afterWriteMessagesCounter < 1 {
		m.t.Errorf("Expected call to ProducerMock.WriteMessages at\n%s", m.funcWriteMessagesOrigin)
	}

	if !m.WriteMessagesMock.invocationsDone() && afterWriteMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to ProducerMock.WriteMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.WriteMessagesMock.expectedInvocations), m.WriteMessagesMock.expectedInvocationsOrigin, afterWriteMessagesCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProducerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockWriteMessagesInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProducerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProducerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockWriteMessagesDone()
}
