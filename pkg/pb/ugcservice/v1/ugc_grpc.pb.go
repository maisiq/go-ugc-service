// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ugcservice/v1/ugc.proto

package ugcservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UGCService_GetReviews_FullMethodName   = "/github.com.maisiq.go_ugc_service.v1.UGCService/GetReviews"
	UGCService_CreateReview_FullMethodName = "/github.com.maisiq.go_ugc_service.v1.UGCService/CreateReview"
	UGCService_UpdateReview_FullMethodName = "/github.com.maisiq.go_ugc_service.v1.UGCService/UpdateReview"
)

// UGCServiceClient is the client API for UGCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UGCServiceClient interface {
	GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error)
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type uGCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUGCServiceClient(cc grpc.ClientConnInterface) UGCServiceClient {
	return &uGCServiceClient{cc}
}

func (c *uGCServiceClient) GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReviewsResponse)
	err := c.cc.Invoke(ctx, UGCService_GetReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uGCServiceClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UGCService_CreateReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uGCServiceClient) UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UGCService_UpdateReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UGCServiceServer is the server API for UGCService service.
// All implementations must embed UnimplementedUGCServiceServer
// for forward compatibility.
type UGCServiceServer interface {
	GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error)
	CreateReview(context.Context, *CreateReviewRequest) (*emptypb.Empty, error)
	UpdateReview(context.Context, *UpdateReviewRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUGCServiceServer()
}

// UnimplementedUGCServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUGCServiceServer struct{}

func (UnimplementedUGCServiceServer) GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedUGCServiceServer) CreateReview(context.Context, *CreateReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedUGCServiceServer) UpdateReview(context.Context, *UpdateReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedUGCServiceServer) mustEmbedUnimplementedUGCServiceServer() {}
func (UnimplementedUGCServiceServer) testEmbeddedByValue()                    {}

// UnsafeUGCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UGCServiceServer will
// result in compilation errors.
type UnsafeUGCServiceServer interface {
	mustEmbedUnimplementedUGCServiceServer()
}

func RegisterUGCServiceServer(s grpc.ServiceRegistrar, srv UGCServiceServer) {
	// If the following call pancis, it indicates UnimplementedUGCServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UGCService_ServiceDesc, srv)
}

func _UGCService_GetReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCServiceServer).GetReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UGCService_GetReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCServiceServer).GetReviews(ctx, req.(*GetReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UGCService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UGCService_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCServiceServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UGCService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UGCServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UGCService_UpdateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UGCServiceServer).UpdateReview(ctx, req.(*UpdateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UGCService_ServiceDesc is the grpc.ServiceDesc for UGCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UGCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.maisiq.go_ugc_service.v1.UGCService",
	HandlerType: (*UGCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReviews",
			Handler:    _UGCService_GetReviews_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _UGCService_CreateReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _UGCService_UpdateReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ugcservice/v1/ugc.proto",
}
