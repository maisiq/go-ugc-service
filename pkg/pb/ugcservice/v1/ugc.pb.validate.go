// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ugcservice/v1/ugc.proto

package ugcservicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _ugc_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Review) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Review with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReviewMultiError, or nil if none found.
func (m *Review) ValidateAll() error {
	return m.validate(true)
}

func (m *Review) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ReviewValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetMovieId()); err != nil {
		err = ReviewValidationError{
			field:  "MovieId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Text

	if len(errors) > 0 {
		return ReviewMultiError(errors)
	}

	return nil
}

func (m *Review) _validateUuid(uuid string) error {
	if matched := _ugc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ReviewMultiError is an error wrapping multiple validation errors returned by
// Review.ValidateAll() if the designated constraints aren't met.
type ReviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewMultiError) AllErrors() []error { return m }

// ReviewValidationError is the validation error returned by Review.Validate if
// the designated constraints aren't met.
type ReviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewValidationError) ErrorName() string { return "ReviewValidationError" }

// Error satisfies the builtin error interface
func (e ReviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewValidationError{}

// Validate checks the field values on GetReviewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsRequestMultiError, or nil if none found.
func (m *GetReviewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	switch v := m.For.(type) {
	case *GetReviewsRequest_MovieId:
		if v == nil {
			err := GetReviewsRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(m.GetMovieId()); err != nil {
			err = GetReviewsRequestValidationError{
				field:  "MovieId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetReviewsRequest_UserId:
		if v == nil {
			err := GetReviewsRequestValidationError{
				field:  "For",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(m.GetUserId()); err != nil {
			err = GetReviewsRequestValidationError{
				field:  "UserId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetReviewsRequestMultiError(errors)
	}

	return nil
}

func (m *GetReviewsRequest) _validateUuid(uuid string) error {
	if matched := _ugc_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetReviewsRequestMultiError is an error wrapping multiple validation errors
// returned by GetReviewsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetReviewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsRequestMultiError) AllErrors() []error { return m }

// GetReviewsRequestValidationError is the validation error returned by
// GetReviewsRequest.Validate if the designated constraints aren't met.
type GetReviewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsRequestValidationError) ErrorName() string {
	return "GetReviewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsRequestValidationError{}

// Validate checks the field values on GetReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReviewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReviewsResponseMultiError, or nil if none found.
func (m *GetReviewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReviewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReviews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReviewsResponseValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReviewsResponseValidationError{
						field:  fmt.Sprintf("Reviews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReviewsResponseValidationError{
					field:  fmt.Sprintf("Reviews[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return GetReviewsResponseMultiError(errors)
	}

	return nil
}

// GetReviewsResponseMultiError is an error wrapping multiple validation errors
// returned by GetReviewsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetReviewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReviewsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReviewsResponseMultiError) AllErrors() []error { return m }

// GetReviewsResponseValidationError is the validation error returned by
// GetReviewsResponse.Validate if the designated constraints aren't met.
type GetReviewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsResponseValidationError) ErrorName() string {
	return "GetReviewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsResponseValidationError{}

// Validate checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewRequestMultiError, or nil if none found.
func (m *CreateReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReviewRequestValidationError{
					field:  "Review",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReviewRequestValidationError{
					field:  "Review",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReviewRequestValidationError{
				field:  "Review",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReviewRequestMultiError(errors)
	}

	return nil
}

// CreateReviewRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewRequestMultiError) AllErrors() []error { return m }

// CreateReviewRequestValidationError is the validation error returned by
// CreateReviewRequest.Validate if the designated constraints aren't met.
type CreateReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewRequestValidationError) ErrorName() string {
	return "CreateReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewRequestValidationError{}

// Validate checks the field values on UpdateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReviewRequestMultiError, or nil if none found.
func (m *UpdateReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReviewRequestValidationError{
					field:  "Review",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReviewRequestValidationError{
					field:  "Review",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReviewRequestValidationError{
				field:  "Review",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReviewRequestMultiError(errors)
	}

	return nil
}

// UpdateReviewRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReviewRequestMultiError) AllErrors() []error { return m }

// UpdateReviewRequestValidationError is the validation error returned by
// UpdateReviewRequest.Validate if the designated constraints aren't met.
type UpdateReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReviewRequestValidationError) ErrorName() string {
	return "UpdateReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReviewRequestValidationError{}
